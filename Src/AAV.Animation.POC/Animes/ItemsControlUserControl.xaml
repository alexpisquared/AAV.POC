<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" x:Class="AAV.Animation.POC.ItemsControlUserControl" mc:Ignorable="d" 
             xmlns:local="clr-namespace:AAV.Animation.POC" 
             d:DesignHeight="450" d:DesignWidth="800" x:Name="ths">
             <!--xmlns:lnk="clr-namespace:AsLink"--> 
  <UserControl.Resources>
    <DataTemplate x:Key="TaskTodoTemplate">
      <Grid Background="#ddd">
        <Grid>
          <TextBlock Text="{Binding Priority}" FontSize="26" HorizontalAlignment="Right"/>
          <CheckBox IsChecked="{Binding IsCurrent}" Content="{Binding TaskName}" VerticalAlignment="Center"/>
        </Grid>

        <Grid Style="{StaticResource IsCurrent_thenLowStyle}" VerticalAlignment="Top" Margin="0 -3" >
          <Path      Name="tiTr2" Fill="#aaa" Data="M0,0 34.0,0 17,17"              HorizontalAlignment="Center" Margin="-2" >
            <Path.Effect>
              <BlurEffect Radius="7" />
            </Path.Effect>
          </Path>
          <Path      Name="tiTri" Fill="#088" Data="M0,0 30.0,0 15,15"              HorizontalAlignment="Center" Margin="-2" />
          <Grid.RenderTransform>
            <TransformGroup>
              <ScaleTransform     />
              <SkewTransform      />
              <RotateTransform    />
              <TranslateTransform Y="0"/>
            </TransformGroup>
          </Grid.RenderTransform>
        </Grid>

      </Grid>

    </DataTemplate>
  </UserControl.Resources>
  <Grid d:DataContext="{d:DesignData /SampleData/TaskTodoSampleData.xaml}">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="Auto"/>
    </Grid.RowDefinitions>

    <Button x:Name="b1" Content="  _Z  " VerticalAlignment="Center" HorizontalAlignment="Right" Click="b1_Click" FontSize="26" />

    <Grid HorizontalAlignment="Left" Margin="46 0 0 0">
      <Path      Name="tiTri" Fill="#088" Data="M0,0 30.0,0 15,15"              HorizontalAlignment="Center" Margin="-2" >
        <Path.Effect>
          <DropShadowEffect Color="#888" ShadowDepth="5" />
        </Path.Effect>
      </Path>
      <Grid.RenderTransform>
        <TransformGroup>
          <ScaleTransform     />
          <SkewTransform      />
          <RotateTransform    />
            <!--X="{Binding ElementName=ths, Path=Anm, Converter={lnk:MultiplierConverter MultiplyBy=110}}"--> 
          <TranslateTransform 
            Y="{Binding ElementName=ths, Path=UpY}" 
            />
        </TransformGroup>
      </Grid.RenderTransform>
    </Grid>

    <ItemsControl Margin="5" Grid.Row="1" Name="l0" ItemTemplate="{DynamicResource TaskTodoTemplate}" ItemsSource="{Binding}" Background="#ccc" HorizontalAlignment="Left">
      <!--The ItemsControl has no default visual appearance. Use the Template property to specify a ControlTemplate to define the appearance of an ItemsControl. The ItemsPresenter uses the specified ItemsPanelTemplate (see below) to layout the items. If an ItemsPanelTemplate is not specified, the default is used. (For ItemsControl, the default is an ItemsPanelTemplate that specifies a StackPanel.-->
      <ItemsControl.Template>
        <ControlTemplate TargetType="{x:Type ItemsControl}">
          <Border BorderBrush="#246" BorderThickness="1" CornerRadius="15" Background="#aaa">
            <ItemsPresenter />
          </Border>
        </ControlTemplate>
      </ItemsControl.Template>
      <!--Use the ItemsPanel property to specify an ItemsPanelTemplate that defines the panel that is used to hold the generated items. In other words, use this property if you want to affect how the items are laid out.-->
      <ItemsControl.ItemsPanel>
        <ItemsPanelTemplate>
          <WrapPanel />
        </ItemsPanelTemplate>
      </ItemsControl.ItemsPanel>
      <!--Use the ItemTemplate to set a DataTemplate to define the visualization of the data objects. This DataTemplate specifies that each data object appears with the Proriity and TaskName on top of a silver ellipse.-->
      <!--Use the ItemContainerStyle property to specify the appearance of the element that contains the data. This ItemContainerStyle gives each item container a margin and a width. There is also a trigger that sets a tooltip that shows the description of the data object when the mouse hovers over the item container.-->
      <ItemsControl.ItemContainerStyle>
        <Style>
          <Setter Property="FrameworkElement.Width" Value="100"/>
          <Setter Property="FrameworkElement.Margin" Value="5"/>
          <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="FrameworkElement.ToolTip" Value="{Binding Content.Description, RelativeSource={x:Static RelativeSource.Self}}"/>
            </Trigger>
          </Style.Triggers>
        </Style>
      </ItemsControl.ItemContainerStyle>
    </ItemsControl>
    <ItemsControl Margin="5" Grid.Row="2" Name="l1" ItemsSource="{Binding}" Background="#bbb" HorizontalAlignment="Left" Visibility="Collapsed">
      <!--The ItemsControl has no default visual appearance. Use the Template property to specify a ControlTemplate to define the appearance of an ItemsControl. The ItemsPresenter uses the specified ItemsPanelTemplate (see below) to layout the items. If an ItemsPanelTemplate is not specified, the default is used. (For ItemsControl, the default is an ItemsPanelTemplate that specifies a StackPanel.-->
      <ItemsControl.Template>
        <ControlTemplate TargetType="ItemsControl">
          <Border BorderBrush="Aqua" BorderThickness="1" CornerRadius="15" Background="#999">
            <ItemsPresenter/>
          </Border>
        </ControlTemplate>
      </ItemsControl.Template>
      <!--Use the ItemsPanel property to specify an ItemsPanelTemplate that defines the panel that is used to hold the generated items. In other words, use this property if you want to affect how the items are laid out.-->
      <ItemsControl.ItemsPanel>
        <ItemsPanelTemplate>
          <WrapPanel />
        </ItemsPanelTemplate>
      </ItemsControl.ItemsPanel>
      <!--Use the ItemTemplate to set a DataTemplate to define the visualization of the data objects. This DataTemplate specifies that each data object appears with the Proriity and TaskName on top of a silver ellipse.-->
      <ItemsControl.ItemTemplate>
        <DataTemplate>
          <DataTemplate.Resources>
            <Style TargetType="TextBlock">
              <Setter Property="FontSize" Value="18"/>
              <Setter Property="HorizontalAlignment" Value="Center"/>
            </Style>
          </DataTemplate.Resources>
          <Grid>
            <Ellipse Fill="Silver"/>
            <StackPanel>
              <TextBlock Margin="3,3,3,0" Text="{Binding Path=Priority}"/>
              <TextBlock Margin="3,0,3,7" Text="{Binding Path=TaskName}"/>
            </StackPanel>
          </Grid>
        </DataTemplate>
      </ItemsControl.ItemTemplate>
      <!--Use the ItemContainerStyle property to specify the appearance of the element that contains the data. This ItemContainerStyle gives each item container a margin and a width. There is also a trigger that sets a tooltip that shows the description of the data object when the mouse hovers over the item container.-->
      <ItemsControl.ItemContainerStyle>
        <Style>
          <Setter Property="Control.Width" Value="100"/>
          <Setter Property="Control.Margin" Value="5"/>
          <Style.Triggers>
            <Trigger Property="Control.IsMouseOver" Value="True">
              <Setter Property="Control.ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Content.Description}"/>
            </Trigger>
          </Style.Triggers>
        </Style>
      </ItemsControl.ItemContainerStyle>
    </ItemsControl>
  </Grid>
</UserControl>